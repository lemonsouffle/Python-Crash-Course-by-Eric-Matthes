# 3-1. Имена: сохраните имена нескольких своих друзей в списке с именем names. Выведите
# имя каждого друга, обратившись к каждому элементу списка (по одному за раз).
names = ['Anna', 'Victoria', 'Diana']
print(names[0])
print(names[1])
print(names[2])

# 3-2. Сообщения: начните со списка, использованного в упражнении 3-1, но вместо вывода
# имени каждого человека выведите сообщение. Основной текст всех сообщений должен
# быть одинаковым, но каждое сообщение должно включать имя адресата.
message = "My friend's name is"
print(message, names[0])
print(message, names[1])
print(message, names[2])

# 3-3. Собственный список: выберите свой любимый вид транспорта (например, мотоциклы
# или машины) и создайте список с примерами. Используйте свой список 
# для вывода утверждений об элементах типа: «Я хотел бы купить мотоцикл Honda».
cars = ['BMW', 'Audi', 'Bentley', 'Mercedes']
message = 'I would like to buy a car'
print(message, cars[3])

# 3-4. Список гостей: если бы вы могли пригласить кого угодно (из живых или умерших)
# на обед, то кого бы вы пригласили? Создайте список, включающий минимум трех людей,
# которых вам хотелось бы пригласить на обед. Затем используйте этот список для вывода
# пригласительного сообщения каждому участнику.
guests = ['Michelle Obama', 'Mary Barra', 'Abigail Johnson']
message_0 = ', I would like to invite you to lunch' 
print(guests[0] + message_0)
print(guests[1] + message_0)
print(guests[2] + message_0)

# 3-5. Изменение списка гостей: вы только что узнали, что один из гостей прийти не сможет, 
# поэтому вам придется разослать новые приглашения. Отсутствующего гостя нужно заменить кем-то другим.
# • Начните с программы из упражнения 3-4. 
# Добавьте в конец программы команду print для вывода имени гостя, который прийти не сможет.
# • Измените список и замените имя гостя, который прийти не сможет, именем нового приглашенного.
# • Выведите новый набор сообщений с приглашениями – по одному для каждого участника, входящего в список.
popped_guest = guests.pop(0)
guests.append('Ursula von der Leyen')
print(popped_guest, "can't come")
print(guests[0] + message_0)
print(guests[1] + message_0)
print(guests[2] + message_0)

# 3-6. Больше гостей: вы решили купить обеденный стол большего размера. 
# Дополнительные места позволяют пригласить на обед еще трех гостей.
# • Начните с программы из упражнения 3-4 или 3-5. 
# Добавьте в конец программы команду print, которая выводит сообщение о расширении списка гостей.
# • Добавьте вызов insert() для добавления одного гостя в начало списка.
# • Добавьте вызов insert() для добавления одного гостя в середину списка.
# • Добавьте вызов append() для добавления одного гостя в конец списка.
# • Выведите новый набор сообщений с приглашениями – по одному для каждого участника, входящего в список.
message_1 = "I'm going to invite more people!"
print(message_1)
guests.insert(0, 'Virginia Woolf')
guests.insert(2, 'Lucy Guo')
guests.append('Neha Narkhede')
print(guests[0] + message_0)
print(guests[1] + message_0)
print(guests[2] + message_0)
print(guests[3] + message_0)
print(guests[4] + message_0)
print(guests[5] + message_0)

# 3-7. Сокращение списка гостей: только что выяснилось, что новый обеденный стол привезти вовремя не успеют, 
# и места хватит только для двух гостей.
# • Начните с программы из упражнения 3-6. Добавьте команду для вывода сообщения о том, 
# что на обед приглашаются всего два гостя.
# • Используйте метод pop() для последовательного удаления гостей из списка до тех пор, 
# пока в списке не останутся только два человека. Каждый раз, когда из списка удаляется очередное имя, 
# выведите для этого человека сообщение о том, что вы сожалеете об отмене приглашения.
# • Выведите сообщение для каждого из двух человек, остающихся в списке. Сообщение должно подтверждать, 
# что более раннее приглашение остается в силе.
# • Используйте команду del для удаления двух последних имен, чтобы список остался пустым. 
# Выведите список, чтобы убедиться в том, что в конце работы программы список действительно не содержит ни одного элемента.
print("The table for our meeting hasn'r delivered. There are only 2 places for the meeting.")
print(guests.pop(), 'so sad to tell you that your invitation was cancelled')
print(guests.pop(), 'so sad to tell you that your invitation was cancelled')
print(guests.pop(), 'so sad to tell you that your invitation was cancelled')
print(guests.pop(), 'so sad to tell you that your invitation was cancelled')
print(guests[0], 'your invitation still in the agreement')
print(guests[1], 'your invitation still in the agreement')
del guests[0]
del guests[0]
print(guests)

# 3-8. Повидать мир: вспомните хотя бы пять стран, в которых вам хотелось бы побывать.
# • Сохраните названия стран в списке. Проследите за тем, чтобы список не хранился
# в алфавитном порядке.
# • Выведите список в исходном порядке. Не беспокойтесь об оформлении списка, просто
# выведите его как обычный список Python.
# • Используйте функцию sorted() для вывода списка в алфавитном порядке без изменения списка.
# • Снова выведите список, чтобы показать, что он по-прежнему хранится в исходном
# порядке.
# • Используйте функцию sorted() для вывода списка в обратном алфавитном порядке
# без изменения порядка исходного списка.
# • Снова выведите список, чтобы показать, что исходный порядок не изменился.
# • Измените порядок элементов вызовом reverse(). Выведите список, чтобы показать,
# что элементы следуют в другом порядке.
# • Измените порядок элементов повторным вызовом reverse(). Выведите список, чтобы
# показать, что список вернулся к исходному порядку.
# • Отсортируйте список в алфавитном порядке вызовом sort(). Выведите список, чтобы
# показать, что элементы следуют в другом порядке.
# • Вызовите sort() для перестановки элементов списка в обратном алфавитном порядке.
# Выведите список, чтобы показать, что порядок элементов изменился.
countries = ['Португалия', 'Италия', 'Швейцария', 'Армения', 'США', 'Великобритания']
print(countries)
print(sorted(countries))
print(countries)
countries.reverse()
print(countries)
countries.sort()
print(countries)
countries.reverse()
print(countries)

# 3-9. Количество гостей: в одной из программ из упражнений с 3-4 по 3-7 используйте len()
# для вывода сообщения с количеством людей, приглашенных на обед.
guests = ['Michelle Obama', 'Mary Barra', 'Abigail Johnson']
popped_guest = guests.pop(0)
guests.append('Ursula von der Leyen')
guests.insert(0, 'Virginia Woolf')
guests.insert(2, 'Lucy Guo')
guests.append('Neha Narkhede')
print(len(guests), 'people were invited to the meeting')


# 3-10. Все функции: придумайте информацию, которую можно было бы хранить в списке.
# Например, создайте список гор, рек, стран, городов, языков… словом, чего угодно. 
# Напишите программу, которая создает список элементов, а затем вызывает каждую функцию,
# упоминавшуюся в этой главе, хотя бы один раз.
moutains = []
moutains.append('Everest')
moutains.insert(0, 'K2')
moutains.append('Tongshanjiabu')
moutains.append('Elbrus')
print(sorted(moutains))
moutains.reverse()
print(moutains)
moutains.sort()
difficult_peak = moutains.pop()
print(difficult_peak)
print(moutains)
print('I want to acheieve', moutains[0])
del moutains[0]
print('I want to acheieve', moutains[0])
del moutains[0]
print('I want to acheieve', moutains[0])
del moutains[0]
print(moutains)

# 3-11. Намеренная ошибка: если ни в одной из предшествующих программ вы еще не сталкивались 
# с ошибками индексирования, попробуйте создать такую ошибку искусственно.
# Измените индекс в одной из программ, чтобы вызвать ошибку индексирования. Не забудьте
# исправить ошибку перед тем, как закрыть программу.
moutains = ['Elbrus', 'Tongshanjiabu', 'Everest', 'K2']
# print(moutains[4])
print(moutains[0], 'is my first peak!')